<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Community">
	<!-- 게시글 작성 -->
	<insert id="insertWrite"
		parameterType="com.hows.community.dto.CommunityDTO">
		<selectKey keyProperty="board_seq" resultType="int"
			order="BEFORE">
			SELECT board_seq.NEXTVAL FROM dual
		</selectKey>
		insert into board (board_seq, board_contents, board_write_date,
		view_count, housing_type_code, space_type_code, area_size_code,
		color_code, member_id)
		values (#{board_seq}, #{board_contents},
		default, default,
		#{housing_type_code}, #{space_type_code},
		#{area_size_code}, #{color_code},
		#{member_id})
	</insert>

	<!-- board_image 테이블에 이미지 정보 저장 후 시퀀스 반환 -->
	<insert id="insertImage"
		parameterType="com.hows.community.dto.ImageDTO">
		<selectKey keyProperty="board_image_seq" resultType="int"
			order="BEFORE">
			SELECT board_image_seq.NEXTVAL FROM dual
		</selectKey>
		insert into board_image (board_image_seq, board_seq, image_url,
		image_order)
		values (#{board_image_seq}, #{board_seq}, #{image_url},
		#{image_order})
	</insert>

	<!-- 방금 삽입한 이미지 시퀀스 값 조회 -->
	<select id="selectBoardImg" resultType="int">
		select
		board_image_seq.currval from dual
	</select>

	<!-- board_tag 테이블에 태그 정보 저장 -->
	<insert id="insertTag"
		parameterType="com.hows.community.dto.TagDTO">
		insert into board_tag (board_tag_seq, board_image_seq,
		product_seq,
		left_position, top_position)
		values (board_tag_seq.nextval,
		#{board_image_seq}, #{product_seq},
		#{left_position}, #{top_position})
	</insert>

	<!-- 이미지 URL로 board_image_seq 조회 로그인 필요 -->
	<select id="selectBoardImageSeqByUrl" resultType="int">
		select
		board_image_seq
		from board_image
		where image_url = #{imageUrl}
	</select>

	<!-- 특정 이미지에 연결된 태그를 조회하는 쿼리 로그인 필요 -->
	<select id="selectTagsByImageSeq"
		resultType="com.hows.community.dto.TagDTO">
		select
		*
		from
		board_tag
		where
		board_image_seq = #{boardImageSeq}
	</select>

	<!-- 태그를 삭제하는 쿼리 로그인 필요 -->
	<delete id="deleteTag">
		delete from board_tag
		where board_tag_seq = #{tagSeq}
	</delete>

	<!-- 게시글 리스트 출력 로그인 없어도 됌 -->
	<select id="selectAll" resultType="map">
		select b.board_seq,
		b.view_count,
		m.nickname,
		m.member_id,
		m.member_seq,
		m.member_avatar,
		count(distinct bl.board_like_seq) as like_count,
		(count(distinct
		c.comment_seq) + count(distinct r.reply_seq)) as comments_count,
		b.board_contents
		from board b
		join member m on b.member_id = m.member_id
		left join board_like bl on b.board_seq = bl.board_seq
		left join
		comments c on b.board_seq = c.board_seq
		left join reply r on
		c.comment_seq = r.comment_seq
		group by b.board_seq, b.view_count,
		m.nickname, m.member_avatar, m.member_id, m.member_seq,
		b.board_contents
		order by b.board_seq desc
	</select>

	<!-- 검색 조건에 따른 리스트 출력 및 정렬 -->
	<select id="selectCommunityPosts" resultType="map">
		select
		b.board_seq,
		b.board_contents,
		b.view_count,
		b.housing_type_code,
		b.space_type_code,
		b.area_size_code,
		b.color_code,
		m.nickname,
		m.member_id,
		m.member_seq,
		m.member_avatar,
		count(distinct
		bl.board_like_seq) as like_count,  <!-- 좋아요 개수 -->
		(count(distinct c.comment_seq) + count(distinct r.reply_seq)) as
		comments_count  <!-- 댓글 및 답글 개수 -->
		from board b
		join member m on b.member_id = m.member_id
		left join
		board_like bl on b.board_seq = bl.board_seq  <!-- 좋아요 조인 -->
		left join comments c on b.board_seq = c.board_seq
		left join reply r on
		c.comment_seq = r.comment_seq

		<where>
			<if test="housingType != null and housingType != ''">
				and b.housing_type_code = #{housingType}
			</if>
			<if test="spaceType != null and spaceType != ''">
				and b.space_type_code = #{spaceType}
			</if>
			<if test="areaSize != null and areaSize != ''">
				and b.area_size_code = #{areaSize}
			</if>
			<if test="color != null and color != ''">
				and b.color_code = #{color}
			</if>
			<if test="keyword != null and keyword != ''">
				and b.board_contents like '%' || #{keyword} || '%'
			</if>
		</where>

		<!-- GROUP BY 절에서 select 절에 있는 모든 컬럼 포함 -->
		group by
		b.board_seq,
		b.board_contents,
		b.view_count,
		b.housing_type_code,
		b.space_type_code,
		b.area_size_code,
		b.color_code,
		m.nickname,
		m.member_id,
		m.member_seq,
		m.member_avatar

		<!-- 동적 정렬 기준 -->
		order by
		<choose>
			<when test="sort == 'likes'">
				like_count desc  <!-- 좋아요 순으로 정렬 -->
			</when>
			<when test="sort == 'views'">
				b.view_count desc  <!-- 조회수 순으로 정렬 -->
			</when>
			<otherwise>
				b.board_seq desc  <!-- 최신순 정렬 (기본값) -->
			</otherwise>
		</choose>
	</select>

	<!-- 게시글 태그로 정렬 로그인 없어도 됌 -->
	<select id="selectByTag" resultType="map">
		select b.board_seq,
		b.view_count,
		m.nickname,
		m.member_id,
		m.member_seq,
		m.member_avatar,
		count(distinct bl.board_like_seq) as like_count,
		(count(distinct c.comment_seq) + count(distinct r.reply_seq)) as
		comments_count,
		b.board_contents
		from board b
		join member m on
		b.member_id = m.member_id
		left join board_like bl on b.board_seq =
		bl.board_seq
		left join comments c on b.board_seq = c.board_seq
		left join
		reply r on c.comment_seq = r.comment_seq
		where lower(b.board_contents)
		like '%' || lower(#{tag}) || '%'  <!-- 게시글 내용에 태그 포함 -->
		group by b.board_seq, b.view_count, m.nickname, m.member_avatar,
		m.member_id, m.member_seq, b.board_contents
		order by b.board_seq desc
	</select>

	<!-- 게시글 이미지 출력 -->
	<select id="selectAllImg" resultType="map">
		select board_seq, image_url
		from board_image
		where board_seq in (select board_seq from board)
	</select>

	<!-- 게시글 디테일 조회 -->
	<select id="selectAllSeq" resultType="map">
		select
		b.board_seq,
		b.board_contents,
		b.view_count,
		to_char(b.board_write_date, 'YYYY-MM-DD
		HH24:MI:SS') as board_write_date,
		b.member_id,
		b.housing_type_code,
		b.space_type_code,
		b.area_size_code,
		m.nickname,
		m.member_id,
		m.member_avatar,
		m.member_seq,
		count(distinct
		bl.board_like_seq) as
		like_count,
		(count(distinct c.comment_seq) +
		count(distinct
		r.reply_seq)) as comments_count,
		count(distinct
		bm.board_book_mark_seq)
		as bookmark_count
		from board b
		join member m on
		b.member_id =
		m.member_id
		left join board_like bl on b.board_seq =
		bl.board_seq
		left
		join comments
		c on b.board_seq = c.board_seq
		left join
		reply r on
		c.comment_seq =
		r.comment_seq
		left join board_book_mark bm on
		b.board_seq = bm.board_seq
		where b.board_seq = #{board_seq}
		group by
		b.board_seq, b.board_contents,
		b.view_count, b.board_write_date,
		b.housing_type_code,
		b.space_type_code, b.area_size_code,
		b.member_id,
		m.nickname,
		m.member_avatar, m.member_id, m.member_seq
	</select>

	<!-- 게시글 디테일 이미지 조회 -->
	<select id="selectImages" resultType="map">
		select
		*
		from
		board_image
		where
		board_seq = #{board_seq}
	</select>

	<!-- 게시글 디테일 상품 정보 태그 -->
	<select id="selectTagsAndProductInfo" resultType="map">
		select
		bt.board_tag_seq,
		bt.board_image_seq,
		bt.left_position,
		bt.top_position,
		p.product_seq,
		p.product_thumbnail,
		p.product_title,
		p.product_contents,
		p.price,
		p.product_category_code
		from
		board_tag bt
		join
		product p on
		bt.product_seq = p.product_seq
		where
		bt.board_image_seq in (select
		board_image_seq from board_image where board_seq =
		#{board_seq})
	</select>

	<!-- 게시글 업데이트 -->
	<update id="updateWrite">
		update board
		set housing_type_code =
		#{housing_type_code},
		space_type_code = #{space_type_code},
		area_size_code = #{area_size_code},
		board_contents = #{board_contents},
		color_code = #{color_code},
		board_write_date = sysdate
		where board_seq =
		#{board_seq}
	</update>

	<!-- 게시글 수정 이미지 주소 -->
	<select id="selectImagesUrls" resultType="String">
		select
		image_url
		from
		board_image
		where
		board_seq = #{board_seq}
	</select>

	<!-- 이미지 순서 업데이트 -->
	<update id="updateImageOrder">
		update board_image
		set image_order = #{image_order}
		where image_url = #{image_url}
	</update>

	<!-- 이미지 수정 시 삭제 -->
	<delete id="deleteImage">
		delete from board_image where image_url = #{imageUrl}
	</delete>

	<!-- 사용자가 해당 게시글에 좋아요를 눌렀는지 확인 -->
	<select id="checkIfUserLikedBoard" resultType="int">
		select count(*)
		from board_like
		where member_id = #{member_id} and board_seq =
		#{board_seq}
	</select>

	<!-- 게시글에 좋아요 추가 -->
	<insert id="addLike">
		insert into board_like (board_like_seq, member_id,
		board_seq)
		values (board_like_seq.nextval, #{member_id}, #{board_seq})
	</insert>

	<!-- 게시글에서 좋아요 취소 -->
	<delete id="removeLike">
		delete from board_like
		where member_id = #{member_id}
		and board_seq = #{board_seq}
	</delete>

	<!-- 게시글의 좋아요 수 가져오기 -->
	<select id="getLikeCount" resultType="int">
		select count(*)
		from
		board_like
		where board_seq = #{board_seq}
	</select>

	<!-- 사용자가 해당 게시글에 북마크를 눌렀는지 확인 -->
	<select id="checkIfUserBookmarkedBoard" resultType="int">
		select
		count(*)
		from board_book_mark
		where member_id = #{member_id} and
		board_seq = #{board_seq}
	</select>

	<!-- 게시글에 북마크 추가 -->
	<insert id="addBookmark">
		insert into board_book_mark (board_book_mark_seq,
		member_id, board_seq)
		values (board_book_mark_seq.nextval,
		#{member_id}, #{board_seq})
	</insert>

	<!-- 게시글에서 북마크 취소 -->
	<delete id="removeBookmark">
		delete from board_book_mark
		where member_id =
		#{member_id} and board_seq = #{board_seq}
	</delete>

	<!-- 게시글의 북마크 수 가져오기 -->
	<select id="getBookmarkCount" resultType="int">
		select count(*)
		from
		board_book_mark
		where board_seq = #{board_seq}
	</select>

	<!-- 게시글 좋아요 처리 -->
	<update id="updateViewCount">
		update board
		set view_count = view_count + 1
		where
		board_seq = #{board_seq}
	</update>

	<!-- 현재 조회수를 가져오는 쿼리 -->
	<select id="getViewCount" resultType="int">
		select view_count
		from board
		where board_seq = #{board_seq}
	</select>

	<!-- 게시글 신고 -->
	<insert id="sendReport">
		insert into board_report
		values
		(board_report_seq.nextval, #{report_code}, default, #{member_id},
		#{board_seq})
	</insert>

	<!-- [마이페이지] 게시글(이미지) 출력 -->
	<select id="selectPostByMemberId" resultType="map">
	    select 
		    b.board_seq, 
		    b.board_contents, 
		    to_char(b.board_write_date, 'YYYY-MM-DD HH24:MI:SS') as board_write_date, 
		    b.view_count, 
		    b.member_id, 
		    m.name as member_name, 
		    (select bi.image_url from board_image bi where bi.board_seq = b.board_seq and ROWNUM = 1) as image_url 
		from 
		    board b 
		inner join 
		    member m on b.member_id = m.member_id 
		where 
		    b.member_id = #{member_id}
		order by 
		    b.board_seq desc
	</select>


	<!-- [마이페이지] 게시글 갯수 -->
	<select id="countPost" resultType="int">
		select count(*) from board
		where member_id = #{member_id}
	</select>

	<!-- [마이페이지] 북마크(이미지) 출력 -->
	<select id="selectBookmarkByMemberId" resultType="map">
	    select
	        b.board_seq,
	        b.board_contents,
	        to_char(b.board_write_date, 'YYYY-MM-DD HH24:MI:SS') as board_write_date,
	        b.view_count,
	        b.member_id,
	        m.name as member_name,
	        (select bi.image_url from board_image bi where bi.board_seq = b.board_seq and ROWNUM = 1) as image_url
	    from
	        board_book_mark bbm
	    inner join
	        board b on bbm.board_seq = b.board_seq
	    inner join
	        member m on b.member_id = m.member_id
	    where
	        bbm.member_id = #{member_id}
	    order by
	        bbm.board_book_mark_seq desc
	</select>


	<!-- [마이페이지] 사용자의 게시글 북마크 갯수 -->
	<select id="countBookmark" resultType="int">
		select count(*) from
		board_book_mark where member_id = #{member_id}
	</select>

	<!-- 게시글 이미지 조회 -->
	<select id="getFileURLsByBoardSeq" resultType="java.lang.String">
		select image_url
		from board_image where board_seq = #{board_seq}
	</select>

	<!-- 사용자 구매내역 -->
	<select id="purchaseHistory" resultType="map">
		select
		p.product_seq,
		p.product_thumbnail,
		p.product_title
		from
		orders o
		join
		order_list ol on
		o.order_seq = ol.order_seq
		join
		product p on ol.product_seq =
		p.product_seq
		where
		o.member_seq = #{member_seq} and o.order_code = 'O6'
	</select>

	<!-- 관리자 -->
	<!-- 게시물 신고조회 (관리자) -->
	<select id="reportedCommunity" parameterType="map"
		resultType="map">
		WITH distinct_images AS (
		SELECT
		board_seq,
		COALESCE(
		LISTAGG(image_url, ',') WITHIN GROUP (ORDER BY image_order), ' '
		) AS image_urls
		FROM (
		SELECT DISTINCT board_seq, image_url, image_order
		FROM board_image
		) bi
		GROUP BY board_seq
		)
		SELECT *
		FROM (
		SELECT
		b.board_seq, -- 게시물 번호
		b.board_contents, -- 게시물 내용
		TO_CHAR(b.board_write_date, 'YYYY-MM-DD') AS board_write_date, -- 작성일시
		m.nickname AS member_id, -- 작성자 닉네임
		m.member_avatar, -- 작성자 아바타
		COUNT(DISTINCT br.board_report_seq) AS report_count, -- 신고 횟수 (중복 제거)
		COALESCE(di.image_urls, ' ') AS image_urls, 
		ROW_NUMBER() OVER (ORDER BY b.board_seq DESC) AS row_num -- 행 번호 부여
		FROM
		board b
		JOIN
		member m ON b.member_id = m.member_id -- 작성자 조인
		LEFT JOIN
		board_report br ON b.board_seq = br.board_seq
		LEFT JOIN
		distinct_images di ON b.board_seq = di.board_seq -- distinct_images CTE와 조인
		GROUP BY
		b.board_seq, b.board_contents, b.board_write_date, m.nickname, m.member_avatar,
		di.image_urls
		)
		WHERE row_num BETWEEN #{startRow} AND #{endRow}
		AND report_count > 0 -- 신고 횟수가 1 이상인 경우만 조회
	</select>

	<!-- 게시물 신고내역 조회 (관리자) -->
	<select id="CommunityReport"
		resultType="com.hows.community.dto.BoardReportDTO">
		SELECT
		br.board_report_seq,
		r.report_description AS
		report_code,
		br.board_report_date,
		br.board_seq,
		m.nickname AS member_id
		FROM
		board_report br
		JOIN
		report r ON br.report_code = r.report_code
		JOIN
		member m ON br.member_id = m.member_id
		WHERE
		br.board_seq = #{board_seq}
	</select>

	<!-- 신고 게시물 삭제 (관리자) -->
	<!-- 먼저 게시물에 대한 신고 기록 삭제 -->
	<delete id="deleteCommunityReport">
		DELETE FROM board_report
		WHERE board_seq =
		#{board_seq}
	</delete>

	<!-- 그 다음에 게시물 삭제 -->
	<delete id="deleteCommunity" parameterType="int">
		DELETE FROM board
		WHERE board_seq = #{board_seq}
	</delete>

	<!-- 전체 신고된 게시물 수 조회 -->
	<select id="getReportedCommunityCount" resultType="int">
		SELECT
		COUNT(DISTINCT b.board_seq) AS totalCount
		FROM board b
		JOIN board_report
		br ON b.board_seq = br.board_seq
	</select>

	<!-- 주거 형태별 게시글 수 조회 -->
	<select id="getPostCountByHousingType" resultType="map">
		select
		h.housing_type_title, count(b.board_seq) as post_count
		from
		housing_type h
		left join board b on h.housing_type_code =
		b.housing_type_code
		group by h.housing_type_title
	</select>

	<!-- 공간별 게시글 수 조회 -->
	<select id="getPostCountBySpaceType" resultType="map">
		select
		s.space_type_title, count(b.board_seq) as post_count
		from space_type s
		left join board b on s.space_type_code = b.space_type_code
		group by
		s.space_type_title
	</select>

	<!-- 평수별 게시글 수 조회 -->
	<select id="getPostCountByAreaSize" resultType="map">
		select
		a.area_size_title, count(b.board_seq) as post_count
		from area_size a
		left join board b on a.area_size_code = b.area_size_code
		group by
		a.area_size_title
	</select>

	<!-- 컬러별 게시글 수 조회 -->
	<select id="getPostCountByColor" resultType="map">
		select
		c.color_title, count(b.board_seq) as post_count
		from color c
		left join
		board b on c.color_code = b.color_code
		group by c.color_title
	</select>

	<select id="todayBoardNum" resultType="int">
		select count(*) from board
		where trunc(board_write_date) = trunc(sysdate)
	</select>
</mapper>
