<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Member">

	<!-- 로그인 시 role_code 가져오기 -->
	<select id="getRoleCode" resultType="String">
		select role_code from member
		where member_id = #{member_id}
	</select>

	<!-- 회원가입 -->
	<insert id="insert">
		insert into member values (
		member_seq.nextval,
		#{member_id},
		#{pw},
		#{name},
		#{nickname},
		#{birth},
		#{gender},
		#{phone},
		#{email},
		#{zip_code},
		#{address},
		#{detail_address},
		default,
		default,
		default,
		default,
		default,
		default,
		default,
		default,
		default,
		default
		)
	</insert>

	<!-- 중복확인 - ID -->
	<select id="checkId" resultType="Integer">
		select count(*) from member
		where member_id = #{member_id}
	</select>

	<!-- 중복확인 - 닉네임 -->
	<select id="checkNickname" resultType="Integer">
		select count(*) from
		member where nickname = #{nickname}
	</select>

	<!-- 중복확인 - 이메일 -->
	<select id="checkEmail" resultType="Integer">
		select count(*) from member
		where email = #{email}
	</select>

	<!-- 회원정보 가져오기 -->
	<select id="findById" resultType="com.hows.member.dto.MemberDTO">
		select * from member where
		member_id = #{id}
	</select>

	<!-- [로그인] 아이디 찾기 -->
	<select id="findId" resultType="String">
		select member_id from member
		where name = #{name} and email = #{email}
	</select>

	<!-- [로그인] 비밀번호 찾기 - 아이디, 이메일 존재여부 검증 -->
	<select id="verifyUser" resultType="Integer">
		select count(*) from member
		where member_id = #{member_id} and email = #{email}
	</select>

	<!-- [로그인] 비밀번호 찾기 - 임시 비밀번호 업데이트 -->
	<update id="updateTempPassword">
		update member set pw = #{pw} where member_id = #{member_id}
	</update>

	<!-- 마이페이지 회원정보 출력 -->
	<select id="selectInfo"
		resultType="com.hows.member.dto.MemberDTO">
		select * from member where member_id = #{member_id}
	</select>

	<!-- 회원정보 수정 -->
	<update id="updateInfo">
		update member
		set nickname = #{nickname},
		email = #{email},
		phone = #{phone},
		zip_code = #{zip_code},
		address = #{address},
		detail_address = #{detail_address}
		where member_id = #{member_id}
	</update>

	<!-- 프로필 이미지 업데이트 -->
	<update id="updateProfileImage">
		update member set member_avatar = #{member_avatar} where member_seq =
		${member_seq}
	</update>
	<!-- 배너 이미지 업데이트 -->
	<update id="updateBannerImage">
		update member set member_banner = #{member_banner} where member_seq =
		${member_seq}
	</update>

	<!-- 현재 프로필 사진 URL 가져오기 -->
	<select id="getProfileImageUrl" resultType="String">
		select member_avatar from member where member_seq = ${member_seq}
	</select>
	<!-- 현재 배너 사진 URL 가져오기 -->
	<select id="getBannerImageUrl" resultType="String">
		select member_banner from member where member_seq = ${member_seq}
	</select>

	<!-- 프로필 삭제 시 member_avatar => null -->
	<update id="updateProfileImageToNull">
		update member set member_avatar = null where member_seq = ${member_seq}
	</update>
	<!-- 프로필 삭제 시 member_avatar => null -->
	<update id="updateBannerImageToNull">
		update member set member_banner = null where member_seq = ${member_seq}
	</update>

	<!-- 비밀번호 변경 시 기존 비밀번호 확인 -->
	<select id="getPasswordById" resultType="string">
		select pw from member
		where member_id = #{member_id}
	</select>

	<!-- 비밀번호 변경 -->
	<update id="updatePw">
		update member set pw = #{pw} where member_id =
		#{member_id}
	</update>

	<!-- 회원탈퇴 -->
	<delete id="deleteUser">
		delete from member where member_id = #{member_id}
	</delete>

	<!-- [방명록] 방명록 작성 위한 member_seq 뽑기 -->
	<select id="findMemberSeq" resultType="int">
		select member_seq from
		member where member_id = #{member_id}
	</select>

	<!-- 팔로우 상태 확인 -->
	<select id="checkIfUserFollowing" resultType="boolean">
		select count(*)
		from follow
		where from_member_seq = #{from_member_seq}
		and to_member_seq = #{to_member_seq}
	</select>

	<!-- 팔로우 추가 -->
	<insert id="addFollow">
		insert into follow (follow_seq, from_member_seq, to_member_seq)
		values (follow_seq.nextval, #{from_member_seq}, #{to_member_seq})
	</insert>

	<!-- 팔로우 취소 -->
	<delete id="removeFollow">
		delete from follow
		where from_member_seq = #{from_member_seq}
		and to_member_seq = #{to_member_seq}
	</delete>

	<!-- 팔로워 목록 가져오기 -->
	<select id="getFollower" resultType="map">
		SELECT
		CASE
		WHEN EXISTS (
		SELECT 1
		FROM follow f2
		WHERE f2.from_member_seq = ${member_seq}
		AND f2.to_member_seq = f.from_member_seq
		) THEN 'Y'
		ELSE 'N'
		END AS is_following,
		m.member_seq,
		m.member_id,
		m.nickname,
		m.member_avatar
		FROM
		follow f
		JOIN member m ON f.from_member_seq = m.member_seq
		WHERE
		f.to_member_seq = ${member_seq}
	</select>

	<!-- 팔로잉 목록 가져오기 -->
	<select id="getFollowing" resultType="map">
		SELECT
		CASE
		WHEN EXISTS (
		SELECT 1
		FROM follow f2
		WHERE f2.from_member_seq = ${member_seq}
		AND f2.to_member_seq = f.to_member_seq
		) THEN 'Y'
		ELSE 'N'
		END AS is_following,
		m.member_seq,
		m.member_id,
		m.nickname,
		m.member_avatar
		FROM
		follow f
		JOIN member m ON f.to_member_seq = m.member_seq
		WHERE
		f.from_member_seq = ${member_seq}
	</select>

	<!-- 팔로워, 팔로잉 수 가져오기 -->
	<select id="countFollow" resultType="map">
		select
		(select count(*) from follow where from_member_seq = ${member_seq}) as
		following,
		(select count(*) from follow where to_member_seq = ${member_seq}) as follower
		from dual
	</select>

	<!-- 맞팔 되어있는지 -->
	<select id="eachFollow" resultType="int">
		select count(*) from follow where from_member_seq = ${from_member_seq} and
		to_member_seq = ${to_member_seq}
	</select>


	<!-- ===========================================[ 관리자 ] -->
	<!-- 전체 회원조회 (관리자) -->
	<select id="selectAll" parameterType="map"
		resultType="com.hows.member.dto.MemberDTO">
		SELECT *
		FROM (
		SELECT
		m.member_seq,
		m.member_id,
		m.name,
		m.nickname,
		CONCAT(CONCAT(SUBSTR(m.phone, 1, 3), '-'), CONCAT(SUBSTR(m.phone, 4,
		4), CONCAT('-',
		SUBSTR(m.phone, 8, 4)))) AS phone,
		m.email,
		m.address,
		m.detail_address,
		m.birth,
		m.signup_date,
		m.withdrawal_date,
		m.member_avatar,
		m.grade_code,
		m.role_code,
		ROW_NUMBER() OVER (ORDER BY
		m.name) AS row_num
		FROM member m
		WHERE m.role_code IN ('R1', 'R2')
		<if test="chosung != null and chosung != ''">
            <![CDATA[
                AND (
                #{chosung} = '전체'
                OR (#{chosung} = 'ㄱ' AND m.name >= '가' AND m.name < '나')
                OR (#{chosung} = 'ㄴ' AND m.name >= '나' AND m.name < '다')
                OR (#{chosung} = 'ㄷ' AND m.name >= '다' AND m.name < '라')
                OR (#{chosung} = 'ㄹ' AND m.name >= '라' AND m.name < '마')
                OR (#{chosung} = 'ㅁ' AND m.name >= '마' AND m.name < '바')
                OR (#{chosung} = 'ㅂ' AND m.name >= '바' AND m.name < '사')
                OR (#{chosung} = 'ㅅ' AND m.name >= '사' AND m.name < '아')
                OR (#{chosung} = 'ㅇ' AND m.name >= '아' AND m.name < '자')
                OR (#{chosung} = 'ㅈ' AND m.name >= '자' AND m.name < '차')
                OR (#{chosung} = 'ㅊ' AND m.name >= '차' AND m.name < '카')
                OR (#{chosung} = 'ㅋ' AND m.name >= '카' AND m.name < '타')
                OR (#{chosung} = 'ㅌ' AND m.name >= '타' AND m.name < '파')
                OR (#{chosung} = 'ㅍ' AND m.name >= '파' AND m.name < '하')
                OR (#{chosung} = 'ㅎ' AND m.name >= '하' AND m.name <= '힣')
            )
            ]]>
		</if>
		<if test="searchTerm != null and searchTerm != ''">
            <![CDATA[
                AND (LOWER(m.name) LIKE '%' || LOWER(#{searchTerm}) || '%'
                     OR LOWER(m.member_id) LIKE '%' || LOWER(#{searchTerm}) || '%')
            ]]>
		</if>
		)
		WHERE row_num BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 전체 회원 수 카운트 -->
	<select id="selectMemberCount" resultType="int">
		SELECT COUNT(*) AS totalCount
		FROM member m
		WHERE role_code IN ('R1',
		'R2')
		<if test="chosung != null and chosung != ''">
        <![CDATA[
                AND (
                #{chosung} = '전체'
                OR (#{chosung} = 'ㄱ' AND m.name >= '가' AND m.name < '나')
                OR (#{chosung} = 'ㄴ' AND m.name >= '나' AND m.name < '다')
                OR (#{chosung} = 'ㄷ' AND m.name >= '다' AND m.name < '라')
                OR (#{chosung} = 'ㄹ' AND m.name >= '라' AND m.name < '마')
                OR (#{chosung} = 'ㅁ' AND m.name >= '마' AND m.name < '바')
                OR (#{chosung} = 'ㅂ' AND m.name >= '바' AND m.name < '사')
                OR (#{chosung} = 'ㅅ' AND m.name >= '사' AND m.name < '아')
                OR (#{chosung} = 'ㅇ' AND m.name >= '아' AND m.name < '자')
                OR (#{chosung} = 'ㅈ' AND m.name >= '자' AND m.name < '차')
                OR (#{chosung} = 'ㅊ' AND m.name >= '차' AND m.name < '카')
                OR (#{chosung} = 'ㅋ' AND m.name >= '카' AND m.name < '타')
                OR (#{chosung} = 'ㅌ' AND m.name >= '타' AND m.name < '파')
                OR (#{chosung} = 'ㅍ' AND m.name >= '파' AND m.name < '하')
                OR (#{chosung} = 'ㅎ' AND m.name >= '하' AND m.name <= '힣')
            )
        ]]>
		</if>
		<if test="searchTerm != null and searchTerm != ''">
        <![CDATA[
            AND (LOWER(m.name) LIKE '%' || LOWER(#{searchTerm}) || '%'
                 OR LOWER(m.member_id) LIKE '%' || LOWER(#{searchTerm}) || '%')
        ]]>
		</if>
	</select>

	<!-- 회원 상세조회 (관리자) -->
	<select id="detailmember"
		resultType="com.hows.member.dto.MemberDTO">
		SELECT
		m.member_seq,
		m.member_id,
		m.name,
		m.nickname,
		SUBSTR(m.phone, 1, 3) || '-' || SUBSTR(m.phone, 4, 4) || '-' || SUBSTR(m.phone, 8, 4)
		AS phone,
		m.email,
		m.address,
		m.detail_address,
		SUBSTR(m.birth, 1, 4) || '년 ' || SUBSTR(m.birth, 5, 2) || '월 ' || SUBSTR(m.birth, 7,
		2) || '일' AS birth,
		m.signup_date,
		m.withdrawal_date,
		m.member_avatar,
		g.grade_title AS grade_code,
		r.role_title AS role_code
		FROM member m
		JOIN grade g ON m.grade_code = g.grade_code
		JOIN role r ON m.role_code = r.role_code
		WHERE m.member_id = #{member_id}
	</select>

	<!-- 모든 등급 정보 가져오기 (관리자) -->
	<select id="AllGrades" resultType="com.hows.grade.dto.GradeDTO">
		SELECT grade_code, grade_title
		FROM grade
	</select>

	<!-- 모든 역할 정보 가져오기 (관리자) -->
	<select id="AllRoles" resultType="com.hows.role.dto.RoleDTO">
		SELECT role_code, role_title
		FROM role
	</select>

	<!-- 등급 업데이트 (관리자) -->
	<update id="updateGrade">
		UPDATE member
		SET grade_code = #{grade_code}
		WHERE
		member_id = #{member_id}
	</update>

	<!-- 역할 업데이트 (관리자) -->
	<update id="updateRole">
		UPDATE member
		SET role_code = #{role_code}
		<if test="role_code == 'R3'">
			, blacklist_date = SYSDATE
		</if>
		<if test="role_code != 'R3'">
			, blacklist_date = NULL
		</if>
		WHERE member_id = #{member_id}
	</update>

	<!-- 전체 블랙리스트 사유 가져오기 (관리자) -->
	<select id="getAllBlacklistReason"
		resultType="com.hows.blacklistreason.dto.BlacklistReasonDTO">
		SELECT * FROM blacklist_reason
	</select>

	<!-- 블랙리스트 등록 (관리자) -->
	<update id="addBlacklist">
		UPDATE member
		SET role_code = 'R3',
		blacklist_reason_code = #{blacklist_reason_code},
		blacklist_date =
		SYSDATE
		WHERE member_id = #{member_id}
	</update>

	<!-- 블랙리스트 조회 (관리자) -->
	<select id="selectBlacklist" parameterType="map"
		resultType="com.hows.member.dto.MemberDTO">
		SELECT
		m.member_id,
		m.name,
		br.blacklist_reason_description AS
		blacklist_reason_code,
		m.blacklist_date
		FROM
		member m
		JOIN
		blacklist_reason br ON m.blacklist_reason_code =
		br.blacklist_reason_code
		WHERE
		m.role_code = 'R3'
		<if test="chosung != null and chosung != ''">
        <![CDATA[
            AND (
                #{chosung} = '전체'
                OR (#{chosung} = 'ㄱ' AND m.name >= '가' AND m.name < '나')
                OR (#{chosung} = 'ㄴ' AND m.name >= '나' AND m.name < '다')
                OR (#{chosung} = 'ㄷ' AND m.name >= '다' AND m.name < '라')
                OR (#{chosung} = 'ㄹ' AND m.name >= '라' AND m.name < '마')
                OR (#{chosung} = 'ㅁ' AND m.name >= '마' AND m.name < '바')
                OR (#{chosung} = 'ㅂ' AND m.name >= '바' AND m.name < '사')
                OR (#{chosung} = 'ㅅ' AND m.name >= '사' AND m.name < '아')
                OR (#{chosung} = 'ㅇ' AND m.name >= '아' AND m.name < '자')
                OR (#{chosung} = 'ㅈ' AND m.name >= '자' AND m.name < '차')
                OR (#{chosung} = 'ㅊ' AND m.name >= '차' AND m.name < '카')
                OR (#{chosung} = 'ㅋ' AND m.name >= '카' AND m.name < '타')
                OR (#{chosung} = 'ㅌ' AND m.name >= '타' AND m.name < '파')
                OR (#{chosung} = 'ㅍ' AND m.name >= '파' AND m.name < '하')
                OR (#{chosung} = 'ㅎ' AND m.name >= '하' AND m.name <= '힣')
            )
        ]]>
		</if>
		<if test="searchTerm != null and searchTerm != ''">
			AND (LOWER(m.name) LIKE '%' || LOWER(#{searchTerm}) || '%'
			OR LOWER(m.member_id) LIKE '%' || LOWER(#{searchTerm}) || '%')
		</if>
	</select>

	<!-- 블랙리스트 수 카운트 (관리자) -->
	<select id="selectBlacklistCount" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM member m
		JOIN blacklist_reason br ON
		m.blacklist_reason_code =
		br.blacklist_reason_code
		WHERE m.role_code =
		'R3'
		<if test="chosung != null and chosung != ''">
        <![CDATA[
            AND (
                #{chosung} = '전체'
                OR (#{chosung} = 'ㄱ' AND m.name >= '가' AND m.name < '나')
                OR (#{chosung} = 'ㄴ' AND m.name >= '나' AND m.name < '다')
                OR (#{chosung} = 'ㄷ' AND m.name >= '다' AND m.name < '라')
                OR (#{chosung} = 'ㄹ' AND m.name >= '라' AND m.name < '마')
                OR (#{chosung} = 'ㅁ' AND m.name >= '마' AND m.name < '바')
                OR (#{chosung} = 'ㅂ' AND m.name >= '바' AND m.name < '사')
                OR (#{chosung} = 'ㅅ' AND m.name >= '사' AND m.name < '아')
                OR (#{chosung} = 'ㅇ' AND m.name >= '아' AND m.name < '자')
                OR (#{chosung} = 'ㅈ' AND m.name >= '자' AND m.name < '차')
                OR (#{chosung} = 'ㅊ' AND m.name >= '차' AND m.name < '카')
                OR (#{chosung} = 'ㅋ' AND m.name >= '카' AND m.name < '타')
                OR (#{chosung} = 'ㅌ' AND m.name >= '타' AND m.name < '파')
                OR (#{chosung} = 'ㅍ' AND m.name >= '파' AND m.name < '하')
                OR (#{chosung} = 'ㅎ' AND m.name >= '하' AND m.name <= '힣')
            )
        ]]>
		</if>
		<if test="searchTerm != null and searchTerm != ''">
			AND (LOWER(m.name) LIKE '%' || LOWER(#{searchTerm}) || '%'
			OR LOWER(m.member_id) LIKE '%' || LOWER(#{searchTerm}) || '%')
		</if>
	</select>

	<!-- 블랙리스트 수정 (관리자) -->
	<update id="modifyBlacklist">
		UPDATE member
		SET role_code = 'R2',
		blacklist_reason_code = '',
		blacklist_date = null
		WHERE member_id =
		#{member_id}
	</update>

	<!-- 연령대별 남녀 회원 수 조회 -->
	<select id="getAgeGenderDistribution" resultType="map">
		with age_ranges
		as (
		select '10대' as age_range from dual
		union all select '20대' from dual
		union all select '30대' from dual
		union all select '40대' from dual
		union all select '50대' from dual
		union all select '60대 이상' from dual
		),
		genders as (
		select 'M' as gender from dual
		union all select 'F' from dual
		),
		age_gender_counts as (
		select
		case
		when floor(months_between(sysdate, to_date(birth, 'YYYYMMDD')) / 12)
		between 10 and 19 then '10대'
		when floor(months_between(sysdate, to_date(birth, 'YYYYMMDD')) / 12)
		between 20 and 29 then '20대'
		when floor(months_between(sysdate, to_date(birth, 'YYYYMMDD')) / 12)
		between 30 and 39 then '30대'
		when floor(months_between(sysdate, to_date(birth, 'YYYYMMDD')) / 12)
		between 40 and 49 then '40대'
		when floor(months_between(sysdate, to_date(birth, 'YYYYMMDD')) / 12)
		between 50 and 59 then '50대'
		else '60대 이상'
		end as age_range, gender
		from member
		),
		all_combinations as (
		select a.age_range, g.gender
		from age_ranges a
		cross join genders g
		)
		select ac.age_range, ac.gender,
		coalesce(count(agc.age_range), 0) as count
		from all_combinations ac
		left join age_gender_counts agc on ac.age_range = agc.age_range and
		ac.gender = agc.gender
		group by ac.age_range, ac.gender
		order by
		ac.age_range, ac.gender
	</select>

</mapper>